service: todo-app
frameworkVersion: '3'

# Load environment variables from .env file
useDotenv: true

provider:
  name: aws
  runtime: nodejs18.x
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  environment:
    TODOS_TABLE_NAME: todos-${self:provider.stage}
    STAGE: ${self:provider.stage}
    # Now these will load from .env file
    AIRTABLE_API_KEY: ${env:AIRTABLE_API_KEY}
    AIRTABLE_BASE_ID: ${env:AIRTABLE_BASE_ID}
    AIRTABLE_TABLE_ID: ${env:AIRTABLE_TABLE_ID}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:*
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/todos-${self:provider.stage}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/todos-${self:provider.stage}/index/*"

plugins:
  - serverless-plugin-typescript
  - serverless-offline

functions:
  createTodo:
    handler: lib/lambdas/createTodo/index.handler
    events:
      - http:
          path: /v1/todo
          method: post
          cors: true

  getTodos:
    handler: lib/lambdas/getTodos/index.handler
    events:
      - http:
          path: /v1/todos
          method: get
          cors: true

  airtableWebhook:
    handler: lib/lambdas/airtableWebhook/index.handler
    events:
      - http:
          path: /v1/webhook
          method: post
          cors: true

custom:
  serverless-offline:
    httpPort: 3000
    host: 0.0.0.0
    useChildProcesses: true