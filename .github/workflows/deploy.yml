name: Deploy Todo App

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch: # Allows manual trigger

env:
  NODE_VERSION: '20'
  AWS_REGION: 'us-east-1'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: TypeScript compile check
        run: npm run build

      - name: CDK synth check
        run: npx cdk synth --context stage=dev

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: development
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to Dev
        run: |
          npx cdk deploy --context stage=dev --require-approval never --outputs-file outputs-dev.json
        env:
          AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
          AIRTABLE_BASE_ID: ${{ secrets.AIRTABLE_BASE_ID }}
          AIRTABLE_TABLE_ID: ${{ secrets.AIRTABLE_TABLE_ID }}

      - name: Display outputs
        run: |
          echo "=== Deployment Outputs ==="
          cat outputs-dev.json
          echo ""
          echo "=== API URL ==="
          cat outputs-dev.json | jq -r '.["TodoApp-dev"].ApiUrl'

      - name: Test deployment
        run: |
          API_URL=$(cat outputs-dev.json | jq -r '.["TodoApp-dev"].ApiUrl')
          echo "Testing API at: $API_URL"
          
          # Test GET /v1/todos
          echo "Testing GET /v1/todos..."
          curl -f "$API_URL/v1/todos" || echo "GET test failed"
          
          # Test POST /v1/todo
          echo "Testing POST /v1/todo..."
          curl -f -X POST "$API_URL/v1/todo" \
            -H "Content-Type: application/json" \
            -d '{"title":"Test from GitHub Actions","description":"Deployed successfully!"}' || echo "POST test failed"
          
          # Test GET again to see new todo
          echo "Testing GET /v1/todos again..."
          curl -f "$API_URL/v1/todos" || echo "Second GET test failed"

      - name: Upload deployment outputs
        uses: actions/upload-artifact@v4
        with:
          name: dev-deployment-outputs
          path: outputs-dev.json